<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link rel="stylesheet" href="/stylesheets/events.css" />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.3.0/flowbite.min.css"
      rel="stylesheet"
    />
  </head>
  <body>
    <%- include('./common/nav')%>

   
    <div class="py-8 px-4 mx-auto max-w-screen-xl text-center lg:py-16 lg:px-6">
      <h1 class="text-center mb-4 text-4xl tracking-tight font-extrabold text-gray-900 dark:text-black pt-10">Events</h1>
      <p class="mb-5 font-light text-gray-500 sm:text-xl dark:text-gray-800">Stay updated on the latest gatherings, networking opportunities, and celebrations designed to connect and inspire our vibrant alumni community.</p>
    </div>
    <hr class="border-0 h-0.5 w-1/2 bg-black mx-auto mb-7">


    <!-- Render event types -->
    <script
      src="https://kit.fontawesome.com/86c853c564.js"
      crossorigin="anonymous"
    ></script>

    <div class="min-h-screen bg-white flex flex-col items-center">
      <div class="flex w-full h-full">
        <%- include('./events/eventTypes', {EventTypes}) %>
        <!-- Event container for dynamic event cards -->
        <div
          id="eventCardsContainer"
          class="w-1/2 h-full flex flex-col items-start justify-center hidden pr-20 card-container"
        >
          <!-- Event Cards will be dynamically added here -->
        </div>
      </div>

      <script>
        // Get reference to event cards container
        const eventCardsContainer = document.getElementById("eventCardsContainer");

        // Get reference to event type list items
        const eventTypeItems = document.querySelectorAll(".eventType");

        function getCard(event) {
          return `<div class="card relative flex flex-col md:flex-row rounded-xl shadow-lg px-3 py-2 max-w-5xl mx-auto border border-white bg-white transition-colors duration-300 ease mb-5 hover:shadow-lg hover:bg-white w-[575.5px]">
            <div class="w-full bg-white flex flex-col space-y-14 px-3">
              <div class="flex justify-between gap-8 items-center">
                <h3 class="font-black text-gray-800 md:text-3xl text-xl pb-4">${event.name}</h3>
                <div class="flex flex-col text-gray-600 text-sm space-y-1">
                  <div class="flex items-end">
                    <i class="fas fa-clock text-gray-500 mr-2"></i>
                    <span>${event.startTime} - ${event.endTime}</span>
                  </div>
                  <div class="flex items-center">
                    <i class="fas fa-calendar-alt text-gray-500 mr-2"></i>
                    <span>${event.startDate} - ${event.endDate}</span>
                  </div>
                  <div class="flex items-center">
                    <i class="fas fa-map-marker-alt text-gray-500 mr-2"></i>
                    <span>${event.venue}</span>
                  </div>
                </div>
              </div>
              <div class="w-full bg-white flex flex-row overflow-x-scroll">
                ${event.mediaFiles.map((ele) => {
                  return `<img src="${ele}" alt="event.title" class="rounded-xl w-32 h-32" />`;
                }).join("")}
              </div>
              <button class="btn-view-more py-2 px-4 bg-gray-400 text-gray-800 font-bold rounded-md transition duration-300 ease-in-out hover:bg-gray-500 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-opacity-50" onclick="toggleDescription(event, 'desc-${event.id}')">Description</button>
              <div id="desc-${event.id}" class="hidden text-gray-700 mt-2">${event.description}</div>
            </div>
          </div>`;
        }

        // Function to toggle the visibility of the description
        function toggleDescription(event, descId) {
          const descriptionDiv = document.getElementById(descId);
          if (descriptionDiv.classList.contains("hidden")) {
            descriptionDiv.classList.remove("hidden");
          } else {
            descriptionDiv.classList.add("hidden");
          }
        }

        // Add click event listener to each event type list item
        eventTypeItems.forEach((item) => {
          item.addEventListener("click", async () => {
            const eventType = item.dataset.type;

            // TODO: Make it in rest Api format
            const filteredEventsData = JSON.parse(
              '<%-unescape(JSON.stringify(Events))%>'
            );

            const filteredEvents = filteredEventsData[eventType];

            // Render event cards for the selected event type
            eventCardsContainer.innerHTML = "";
            filteredEvents.forEach((event) => {
              // Create event card HTML
              const eventCardHTML = getCard(event);

              // Append event card HTML to the event cards container
              eventCardsContainer.insertAdjacentHTML(
                "beforeend",
                eventCardHTML
              );
            });

            // Show event cards container
            eventCardsContainer.classList.remove("hidden");
          });
        });
      </script>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.3.0/flowbite.min.js"></script>
    <%- include('./common/footer')%>
  </body>
</html>
