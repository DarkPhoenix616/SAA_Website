<!-- Render event types -->
<%- include('./events/eventTypes', {EventTypes}) %>
<!-- Event container for dynamic event cards -->
<div
  id="eventCardsContainer"
  class="w-1/2 h-full flex flex-col items-center justify-center hidden pr-20 card-container"
>
  <!-- Event Cards will be dynamically added here -->
</div>

<script>
      // Get reference to event cards container
      const eventCardsContainer = document.getElementById('eventCardsContainer');

      // Get reference to event type list items
      const eventTypeItems = document.querySelectorAll('.eventType');

      function getCard(event) {
          return  `<div class='flex flex-col pt-9'>
    <div
      class='card relative flex flex-col md:flex-row md:space-x-5 space-y-3 md:space-y-0 rounded-xl shadow-lg p-5 max-w-5xl mx-auto border border-white bg-white transition-colors duration-300 ease mb-5 hover:shadow-lg hover:bg-white'
    >
      <div class='w-full bg-white flex flex-col space-y-2 p-3'>
        <div class='flex justify-between items-center'>
          <h3 class='font-black text-gray-800 md:text-3xl text-xl pb-4'>
            ${event.title}
          </h3>
          <div class='flex flex-col text-gray-600 text-sm space-y-1'>
            <div class='flex items-center'>
              <i class='fas fa-clock text-gray-500 mr-2'></i>
              <span>${event.time}</span>
            </div>
            <div class='flex items-center'>
              <i class='fas fa-map-marker-alt text-gray-500 mr-2'></i>
              <span>${event.location}</span>
            </div>
          </div>
        </div>
        <div
          class='flex flex-col md:flex-row md:space-x-5 space-y-3 md:space-y-0'
        >
          <div class='w-full md:w-1/3 bg-white grid place-items-center'>
            <img src='${event.imagePath}' alt='${image.title}' class='rounded-xl' />
          </div>
          <div class='w-full md:w-2/3 bg-white flex flex-col space-y-2 p-3'>
            <p class='md:text-lg text-gray-500 text-base pt-3 flex-1'>
                ${event.description}
            </p>
            <a
              href='#'
              class='inline-block bg-[#d3d3d3] text-[#333] text-center px-4 py-2 text-[14px] font-bold rounded-[4px] transition-colors duration-300 ease mt-auto no-underline hover:bg-[#a9a9a9] w-20'
              >${event.description}</a
            >
          </div>
        </div>
      </div>
    </div>
  </div>
  `
      }

      // Add click event listener to each event type list item
      eventTypeItems.forEach(item => {
        item.addEventListener('click', async () => {
          const eventType = item.dataset.type;
          const filteredEvents = <%= Events %>[eventType];

          // Clear previous event cards
          eventCardsContainer.innerHTML =getCard(eventType)

          // Render event cards for the selected event type
          filteredEvents.forEach(event => {

            // Create event card HTML
            const eventCardHTML = `<div class="card relative flex flex-col md:flex-row md:space-x-5 space-y-3 md:space-y-0 rounded-xl shadow-lg p-5 max-w-5xl mx-auto border border-white bg-white transition-colors duration-300 ease mb-5 hover:shadow-lg hover:bg-white">
                                      <!-- Event card content -->
                                  </div>`;

            // Append event card HTML to the event cards container
            eventCardsContainer.insertAdjacentHTML('beforeend', <%-include('./events/eventCard',{event}) %> );
          });

          // Show event cards container
          eventCardsContainer.classList.remove('hidden');
        });
      });
</script>
